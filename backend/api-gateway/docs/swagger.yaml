basePath: /
definitions:
  handlers.LoginRequest:
    description: Authenticate user and return JWT token
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.RegisterRequest:
    description: Register a new user
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - confirmPassword
    - email
    - name
    - password
    type: object
  handlers.UpdateUserRequest:
    description: Update user profile information
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
  handlers.ValidateRequest:
    description: Validate JWT token and return user information
    properties:
      token:
        type: string
    required:
    - token
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Gateway for microservices architecture
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: API Gateway
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid credentials
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid data
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User registration
      tags:
      - auth
  /api/auth/validate:
    post:
      consumes:
      - application/json
      description: Validate JWT token and return user information
      parameters:
      - description: Token to validate
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ValidateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid token
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Validate JWT token
      tags:
      - auth
  /api/users/list:
    get:
      consumes:
      - application/json
      description: Get paginated list of users
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of users per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
  /api/users/profile/{id}:
    get:
      consumes:
      - application/json
      description: Get user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user profile information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
